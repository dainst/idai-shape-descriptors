import * as tf from '@tensorflow/tfjs';
import { Point } from '../../../src/image_processing/blob_analysis/point';
import { makeFourierDescriptorFromPolygon } from
    '../../../src/shape_descriptors/fourier_descriptors/fourier_descriptors_phase';

describe('Test makeFourierDescriptorFromPolygon', () => {
    let inputPoints: Point[];
    const harmonics = 40;
    let descriptors: tf.Tensor;
    
    beforeAll(() => {

        inputPoints = points.map(point => {
                        const [x, y] = point;
                        return { x, y };
        });
        descriptors = makeFourierDescriptorFromPolygon(inputPoints);
    });

    it('Should have vector length depending on descriptor harmonics', () => {

        expect(descriptors.shape[0]).toBe(2 * harmonics + 1);
    });

    it('Should return expected unnormalized Fourier descriptor from given points', () => {

        const decimals = 7;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const descriptorsRoundedString = Array.from(descriptors.dataSync()).map((value: any) =>
                                                                                value.toFixed(decimals));
        expect(descriptorsRoundedString).toEqual(expectedFourierDescriptor.map(val => val.toFixed(decimals)));

    });

});

const points = [
    [6,1],
    [7,1],
    [8,2],
    [9,2],
    [10,2],
    [10,3],
    [9,4],
    [9,5],
    [8,5],
    [7,6],
    [6,6],
    [5,5],
    [5,4],
    [5,3],
    [4,2],
    [5,1]];

const expectedFourierDescriptor = [
    6.9868736,
    3.2612038,
    -0.7913067,
    -2.3645117,
    0.0572873,
    0.0005016,
    0.0080344,
    -0.0297811,
    0.1191455,
    -0.1317156,
    0.0176481,
    -0.0090753,
    -0.0506155,
    0.0252539,
    -0.0017392,
    0.0554376,
    -0.0073523,
    -0.0236628,
    -0.0078438,
    0.0132373,
    0.0110613,
    -0.0055401,
    0.0012230,
    0.0077316,
    0.0131773,
    0.0087946,
    -0.0078870,
    -0.0023307,
    -0.0024896,
    0.0036551,
    -0.0009037,
    0.0027258,
    -0.0047176,
    0.0044162,
    0.0037955,
    -0.0072385,
    0.0003810,
    -0.0041335,
    -0.0004343,
    -0.0035999,
    0.0046420,
    0.0011734,
    0.0000040,
    -0.0012148,
    -0.0029009,
    -0.0013038,
    -0.0046445,
    0.0015051,
    0.0033243,
    -0.0009585,
    0.0005231,
    -0.0003329,
    0.0004164,
    -0.0003544,
    0.0002881,
    -0.0003805,
    0.0002467,
    0.0033819,
    0.0008138,
    -0.0006811,
    -0.0019423,
    0.0018228,
    0.0001190,
    0.0015514,
    -0.0017893,
    -0.0004886,
    0.0018335,
    -0.0001496,
    0.0010369,
    -0.0011434,
    0.0001556,
    -0.0003464,
    -0.0007284,
    0.0006164,
    0.0000018,
    -0.0001361,
    -0.0001442,
    -0.0004255,
    -0.0010517,
    -0.0012507,
    0.0005301,
    0.0002545,
    -0.0005988,
    0.0000161,
    -0.0001630,
    0.0002326,
    -0.0001659,
    0.0004846,
    0.0000167,
    -0.0018042,
    -0.0000455,
    -0.0004768,
    -0.0002134,
    -0.0005930,
    0.0021502,
    -0.0010547,
    0.0001631,
    -0.0002989,
    -0.0017665,
    0.0001689,
    -0.0014212,
    0.0024937,
    0.0009661,
    -0.0016778,
    -0.0004708,
    0.0004508,
    0.0012935,
    -0.0000159,
    -0.0001093,
    0.0005323,
    0.0020470,
    0.0031008,
    -0.0012392,
    -0.0013998,
    -0.0012653,
    0.0025183,
    -0.0000371,
    0.0016987,
    -0.0038373,
    0.0015052,
    0.0038538,
    -0.0032818,
    0.0012868,
    -0.0038479,
    0.0004274,
    -0.0033847,
    0.0019026,
    0.0034321,
    0.0000714,
    -0.0018013,
    -0.0035712,
    -0.0034789,
    -0.0108237,
    -0.0023766,
    0.0090597,
    0.0008253,
    0.0040421,
    -0.0012560,
    0.0006670,
    -0.0076179,
    0.0044099,
    -0.0034023,
    -0.0068509,
    0.0248888,
    0.0172679,
    0.0056441,
    -0.0351477,
    0.0135728,
    -0.0012652,
    0.0369387,
    -0.0280256,
    -0.0332929,
    0.0670643,
    0.0273089,
    0.1036088,
    -0.0513177,
    -0.0335723,
    0.0148967,
    -0.3135283,
    0.0586638,
    -0.1212211,
    0.1190468,
    ];